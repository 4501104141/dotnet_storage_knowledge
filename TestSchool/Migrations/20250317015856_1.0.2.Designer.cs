// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestSchool.Model;

#nullable disable

namespace TestSchool.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250317015856_1.0.2")]
    partial class _102
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TestSchool.Model.SqlClass", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("stateID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("stateID");

                    b.ToTable("tb_class");
                });

            modelBuilder.Entity("TestSchool.Model.SqlOrder", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("orderID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("orderID");

                    b.ToTable("tb_order");
                });

            modelBuilder.Entity("TestSchool.Model.SqlSchool", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("des")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("des2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("tb_school");
                });

            modelBuilder.Entity("TestSchool.Model.SqlStateClass", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("tb_state_class");
                });

            modelBuilder.Entity("TestSchool.Model.SqlStudent", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long?>("classsID")
                        .HasColumnType("bigint");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("schoolID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("classsID");

                    b.HasIndex("schoolID");

                    b.ToTable("tb_student");
                });

            modelBuilder.Entity("TestSchool.Model.SqlTeacher", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("des")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("des2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("des3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("schoolID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("schoolID");

                    b.ToTable("tb_teacher");
                });

            modelBuilder.Entity("TestSchool.Model.SqlClass", b =>
                {
                    b.HasOne("TestSchool.Model.SqlStateClass", "state")
                        .WithMany("classes")
                        .HasForeignKey("stateID");

                    b.Navigation("state");
                });

            modelBuilder.Entity("TestSchool.Model.SqlOrder", b =>
                {
                    b.HasOne("TestSchool.Model.SqlOrder", "order")
                        .WithMany("orders")
                        .HasForeignKey("orderID");

                    b.Navigation("order");
                });

            modelBuilder.Entity("TestSchool.Model.SqlStudent", b =>
                {
                    b.HasOne("TestSchool.Model.SqlClass", "classs")
                        .WithMany("students")
                        .HasForeignKey("classsID");

                    b.HasOne("TestSchool.Model.SqlSchool", "school")
                        .WithMany("students")
                        .HasForeignKey("schoolID");

                    b.Navigation("classs");

                    b.Navigation("school");
                });

            modelBuilder.Entity("TestSchool.Model.SqlTeacher", b =>
                {
                    b.HasOne("TestSchool.Model.SqlSchool", "school")
                        .WithMany("teachers")
                        .HasForeignKey("schoolID");

                    b.Navigation("school");
                });

            modelBuilder.Entity("TestSchool.Model.SqlClass", b =>
                {
                    b.Navigation("students");
                });

            modelBuilder.Entity("TestSchool.Model.SqlOrder", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("TestSchool.Model.SqlSchool", b =>
                {
                    b.Navigation("students");

                    b.Navigation("teachers");
                });

            modelBuilder.Entity("TestSchool.Model.SqlStateClass", b =>
                {
                    b.Navigation("classes");
                });
#pragma warning restore 612, 618
        }
    }
}
